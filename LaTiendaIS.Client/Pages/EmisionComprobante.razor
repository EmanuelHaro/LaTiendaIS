@page "/comprobante"

@using LaTiendaIS.Shared;
@using LaTiendaIS.Client.Service.Contrato;
@inject IArticuloServicio _articuloServicio
@inject IVentaServicio _ventaServicio
@inject ILineaDeVentaServicio _lineaDeVentaServicio
@inject IClienteServicio _clienteServicio
@inject IComprobanteServicio _comprobanteServicio

@using MudBlazor
@inject ISnackbar Snackbar
@inject NavigationManager _navManager

<div>
    <h3 class="text-center" style=" margin-top: 10px; font-weight: bold;">Emisión de Comprobante</h3>
    <h5 class="text-center" style=" margin-top: 10px; text-decoration: underline;">La Tienda</h5>

</div>
<div style="display: flex; justify-content: space-between; align-items: flex-start;">
    <h4 style="margin-left: 65px; margin-top: 10px;">Sucursal: Barrio Sur</h4>
    <h4 style="margin-right: 65px; margin-top: 10px;">Punto de Venta: 10</h4>
</div>


@if (cliente != null)
{
    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-right: 20px; margin-top: 20px;">
        <MudItem style="margin-left: 65px;">
            Nombre del Titular: <b>@cliente.Nombre</b><br />
            Condicion Tributaria: <b>@cliente.CondicionTributaria.Descripcion</b>
        </MudItem>
        <div style="display: flex; flex-direction: column; align-items: flex-end;">
            <MudItem style="margin-left: 65px;">
                CUIT: <b>@cliente.CUIT</b>
            </MudItem>
            <div>
                @switch (condicionTributariaDescripcion)
                {
                    case "Responsable Inscripto":
                        <p>Comprobante: Factura A</p>
                        tipoComprobante = 1;
                        break;

                    case "Monotributo":
                        <p>Comprobante: Factura A</p>
                        tipoComprobante = 1;
                        break;

                    default:
                        <p>Comprobante: Factura B</p>
                        tipoComprobante = 2;
                        break;
                }
            </div>
        </div>
    </div>

}

@* @if(cliente.CondicionTributaria.Descripcion != null)
{ *@

@* } *@

<MudContainer>
    <MudPaper Elevation="3" Class="p-3">
        

        <MudTable Items="@lineasDeVentaDTO" Dense="true">
            <HeaderContent>
                <MudTh class="text-bold" style="text-align: center; font-weight: bold;">Descripción</MudTh>
                <MudTh class="text-bold" style="text-align: center; font-weight: bold;">Precio de Venta</MudTh>
                <MudTh class="text-bold" style="text-align: center; font-weight: bold;">Cantidad</MudTh>
                <MudTh class="text-bold" Style="font-weight: bold;">Total</MudTh>
            </HeaderContent>
            <RowTemplate>
                @{
                    var linea = context as LineaDeVenta;
                }
                @if (linea != null)
                {
                    <MudTd style="text-align: center;">@linea.Articulo.Descripcion</MudTd>
                    <MudTd style="text-align: center;">@linea.Articulo.PrecioDeVenta</MudTd>
                    <MudTd style="text-align: center;">@linea.Cantidad</MudTd>
                    <MudTd>@(linea.Cantidad * linea.Articulo.PrecioDeVenta)</MudTd>
                }
                
            </RowTemplate>
        </MudTable>

        <MudDivider />
        @if (totalAPagar!=null)
        {
            <div class="d-flex" style="max-width: 200px; margin: 20px; margin-left: 80%">
                <MudTextField @bind-Value="totalAPagar" Label="Total" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" ReadOnly="true" Style="width: 100%" Step="0.01" Format="N2" />
            </div>
        }
        
    </MudPaper>
</MudContainer>


<div class="d-flex" style="max-width: 300px; margin: 30px;">
    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => VolverAInicio()">Finalizar</MudButton>
</div>


@code {
    private List<LineaDeVenta> lineasDeVentaDTO = new List<LineaDeVenta>();

    private Venta venta1;
    private Cliente cliente;
    private decimal totalAPagar; // Cargado en OnInitializedAsync

    private TipoDeComprobante tipoDeComprobanteDTO; //factura A o B
    private CondicionTributaria condicionTributariaDTO; //monotributista, ...

    private string condicionTributariaDescripcion = " ";
    private int tipoComprobante = 0;

    private readonly HttpClient _httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _ventaServicio.ObtenerUltimaVenta();
            if (response != null)
            {
                venta1 = response;
                totalAPagar = venta1.Total;
            }

            if(totalAPagar>=10000)
            {
                var responseClient = await _clienteServicio.ObtenerUltimaCliente();
                if (responseClient!=null)
                {                   
                    cliente = responseClient;
                    condicionTributariaDescripcion = cliente.CondicionTributaria?.Descripcion ?? " ";

                }
            }




            var lineasdeventas = await _lineaDeVentaServicio.ListarLineaDeVentas();
            if (lineasdeventas!=null)
            {
                foreach (var ldv in lineasdeventas)
                {
                    if (ldv.IdVenta == venta1.IdVenta)
                    {
                        // ldv.Venta = venta1;
                        lineasDeVentaDTO.Add(ldv);
                    }
                }
            }

        }
        catch (NullReferenceException ex)
        {
            // Maneja la excepción de referencia nula aquí
            Snackbar.Add("Error: Se ha encontrado una referencia nula.", Severity.Error);
        }
        catch (Exception ex)
        {
            // Maneja cualquier otra excepción aquí
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async void VolverAInicio()
    {
        
        try
        {
            Comprobante comprobante = new Comprobante();
            comprobante.IdVenta = venta1.IdVenta;
            comprobante.IdTipoDeComprobante = tipoComprobante;

            var response = await _comprobanteServicio.AgregarComprobante(comprobante);
            if (response != null)
            {
                Snackbar.Add("Se genero el comprobante con exito", Severity.Success);
                _navManager.NavigateTo("/");
            }
            else
            {
                Snackbar.Add("Error en el comprobante", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        

    }
}
