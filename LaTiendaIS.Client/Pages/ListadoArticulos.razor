@page "/"
@page "/listadoArticulos"

@* @using LaTiendaIS.Client.Services.Contrato; *@
@* @inject IEmpleadoService _empleadoServicio *@

@using LaTiendaIS.Shared;
@using LaTiendaIS.Client.Service.Contrato;
@inject IArticuloServicio _articuloServicio

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations


@using System.Net.Http.Json

@using MudBlazor
@inject ISnackbar Snackbar
@inject NavigationManager _navManager


@inject HttpClient httpClient

<div class="d-flex" style="max-width: 600px; margin: 20px ;">
    <MudTextField @bind-Value="TextCodigo" Variant="Variant.Text" Label="Ingresar Codigo"></MudTextField>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ObtenerArticulo(TextCodigo)">Agregar</MudButton>
 </div>

<MudTable Items="@ArticuloDTOs" Dense="@dense" Hover="@hover" ReadOnly="false" CanCancelEdit="@canCancelEdit" Filter="new Func<ArticuloDTO,bool>(FilterFunc)"
@bind-SelectedItem="selectedItem1" SortLabel="Ordenar por" EditTrigger="TableEditTrigger.EditButton">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Listado de Articulos</MudText>
        <MudSpacer />
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col />
         <col /> 
        <col />
        <col />
        <col />
        <col style="width:20px;" />
        <col style="width:20px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ArticuloDTO, object>(x=>x.IdCodigo)">Codigo</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ArticuloDTO, object>(x=>x.Descripcion)">Descripcion</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ArticuloDTO, object>(x=>x.PrecioDeVenta)">Precio De Venta</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ArticuloDTO, object>(x=>x.Talle.TipoTalle.DescripcionTipoTalle)">Tipo de Talle</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel SortBy="new Func<ArticuloDTO, object>(x=>x.Talle.DescripcionTalle)">Talle</MudTableSortLabel></MudTh> 
        <MudTh><MudTableSortLabel SortBy="new Func<ArticuloDTO, object>(x=>x.Marca.DescripcionMarca)">Marca</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ArticuloDTO, object>(x=>x.Color.DescripcionColor)">Color</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ArticuloDTO, object>(x=>x.Categoria.DescripcionCategoria)">Categoria</MudTableSortLabel></MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="IdCodigo">@context.IdCodigo</MudTd>
        <MudTd DataLabel="Descripcion">@context.Descripcion</MudTd>
        <MudTd DataLabel="PrecioVenta">@context.PrecioDeVenta.ToString("0.00")</MudTd>
        <MudTd DataLabel="TipoTalle">@context.Talle.TipoTalle.DescripcionTipoTalle</MudTd>
         <MudTd DataLabel="Talle">@context.Talle.DescripcionTalle</MudTd> 
        <MudTd DataLabel="Marca">@context.Marca.DescripcionMarca</MudTd>
        <MudTd DataLabel="Color">@context.Color.DescripcionColor</MudTd>
        <MudTd DataLabel="Categoria">@context.Categoria.DescripcionCategoria</MudTd>
        <MudTd>
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="() => EliminarArticulo(context.IdCodigo)" />
        </MudTd>
    </RowTemplate>
</MudTable>

<div class="d-flex" style="max-width: 200px; margin: 20px; margin-left: 80%">
    <MudTextField @bind-Value="Total" Label="Total" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" ReadOnly="true" Style="width: 100%" Step="0.01" Format="N2" />
</div>

<div class="container d-flex justify-content-between">
    <div class="d-flex" style="max-width: 300px; margin: 20px;">
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => CancelarVenta()">Cancelar</MudButton>
    </div>
    <div class="d-flex" style="max-width: 300px; margin: 20px; margin-left: 80%;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => Pagar()">Pagar</MudButton>
    </div>
</div>




@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    public int TextCodigo { get; set; }
    public double? Total = 0;

    private ArticuloDTO selectedItem1 = null;
    private HashSet<ArticuloDTO> selectedItems1 = new HashSet<ArticuloDTO>();
    private List<ArticuloDTO> ArticuloDTOs = new List<ArticuloDTO>();

    protected override async Task OnInitializedAsync()
    {
        // try
        // {
        //     ArticuloDTOs = await _articuloServicio.ListarArticulos();
        // }
        // catch (Exception ex)
        // {

        //     Console.WriteLine(ex.Message);
        // }
    }


    private bool FilterFunc(ArticuloDTO articuloDTO)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (articuloDTO.Descripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (articuloDTO.IdCodigo.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    private async void ObtenerArticulo(int idArticulo)
    {
        if (idArticulo!=0)
        {
            try
            {
                var articulo = await _articuloServicio.ObtenerArticulo(idArticulo);
                ArticuloDTOs.Add(articulo);

                Total += articulo.PrecioDeVenta;

                StateHasChanged();
                Snackbar.Add("Articulo agregado", Severity.Success);
            }
            catch(Exception ex)
            {
                Snackbar.Add("Codigo Invalido", Severity.Warning);
            }

        }
        else
        {
            Snackbar.Add("Codigo Invalido", Severity.Warning);
        }
    }

    private async void EliminarArticulo(int idArticulo)
    {
        var articulo = ArticuloDTOs.FirstOrDefault(a => a.IdCodigo == idArticulo);
        ArticuloDTOs.Remove(articulo);

        Total -= articulo.PrecioDeVenta;

        StateHasChanged();
        Snackbar.Add("Articulo Eliminado", Severity.Warning);
    }

    private void Pagar()
    {
        Snackbar.Add("Pagó", Severity.Success);
    }

    private void CancelarVenta()
    {
        ArticuloDTOs.Clear();
        Total = 0;
    }
}
