@page "/realizarpago"


@using LaTiendaIS.Shared;
@using LaTiendaIS.Client.Service.Contrato;
@inject IArticuloServicio _articuloServicio

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<!--Pagar-->
@using LaTiendaIS.Shared;
@using LaTiendaIS.Client.Service.Contrato;
@inject IArticuloServicio _articuloServicio
@inject IVentaServicio _ventaServicio
@inject ILineaDeVentaServicio _lineadeventaServicio


@using System.Net.Http.Json

@using MudBlazor
@using System.Text.Json;
@using System.Text;
@inject ISnackbar Snackbar
@inject NavigationManager _navManager


@inject HttpClient httpClient

<h2>Realizar el pago</h2>
<div class="d-flex" style="max-width: 600px; margin: 20px ;">
    <MudSelect T="string" Label="Elegir medio de pago" AnchorOrigin="Origin.BottomCenter" @bind-Value="medioDePago">
        <MudSelectItem Value="@("")" />
        <MudSelectItem Value="@("Efectivo")" />
        <MudSelectItem Value="@("Con Tarjeta")" />
    </MudSelect>
</div>

<div class="d-flex flex-column" style="max-width: 600px; margin: 20px;" @key="medioDePago">
    @if (string.IsNullOrWhiteSpace(medioDePago))
    {
        <p>Por favor, selecciona un medio de pago.</p>
    }
    else if (medioDePago == "Efectivo")
    {
        <div>
            <p>Total a pagar: @totalAPagar</p>
            <br />
            <p>Monto Recibido: <input type="number" @bind="montoRecibido" /></p>
            <br />
            <p>Vuelto: @calcularVuelto()</p>
        </div>
        <div class="d-flex" style="max-width: 300px; margin: 20px;">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancelar">Cancelar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => Autorizar()" style="margin-left: 30px;">Pagar</MudButton>
        </div>
    }
    else if (medioDePago == "Con Tarjeta")
    {
        <div>
                    <MudGrid Class="justify-space-between" Style="max-width: 300px;">
                        <MudItem xs="12">
                    <MudTextField Label="Nombre del Titular" @bind-Value="nombreTitular" Variant="@Variant.Text" MaxLength="40" />
                        </MudItem>
                        <MudItem xs="6">
                    <MudTextField Mask="@(new PatternMask("00000000"))" Label="DNI" @bind-Value="dniTitular" Variant="@Variant.Text" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Mask="@(new PatternMask("0000 0000 0000 0000"))" Label="Numero de Tarjeta"
                                          @bind-Value="creditCard" Variant="@Variant.Text" Clearable />
                         </MudItem>
                         <MudItem xs="4">
                             <MudTextField Mask="@(new DateMask("MM/YY", 'Y', 'M'))" Label="Vencimiento"
                                           @bind-Value="expiration" Variant="@Variant.Text" />
                         </MudItem>
                        <MudItem xs="4" />
                        <MudItem xs="4">
                             <MudTextField Mask="@(new PatternMask("000"))" Label="CVV"
                                @bind-Value="cvv" Variant="@Variant.Text" />
                        </MudItem>

                         <MudItem xs="12">
                            Nombre del Titular: <b>@nombreTitular</b><br />
                            DNI: <b>@dniTitular</b><br />
                            Numero de Tarjeta: <b>@creditCard</b><br />
                            Fecha de Venc: <b>@expiration</b><br />
                            CVV: <b>@cvv</b>                 
                        </MudItem>
                    </MudGrid>

        </div>
        <div class="d-flex" style="max-width: 300px; margin: 20px;">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancelar">Cancelar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Autorizar" style="margin-left: 30px;">Autorizar Pago</MudButton>
        </div>       
    }
</div>



@code {
    //Tarjeta
    private string nombreTitular;
    private string dniTitular;
    private string creditCard;
    private string expiration;
    private string cvv;

    //Medios de PAgo
    private string medioDePago = "";
    private double totalAPagar; // Cargado en OnInitializedAsync
    private double montoRecibido;

    public VentaDTO venta1;

    private readonly HttpClient _httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _ventaServicio.ObtenerUltimaVenta();
            if (response != null)
            {
                venta1 = response;
                totalAPagar = venta1.Total;
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add("Ultima venta no cargada", Severity.Error);
        }

    }

    private double calcularVuelto()
    {
        return montoRecibido - totalAPagar;
    }


    private async void Cancelar()
    {
        var listaLDV = await _lineadeventaServicio.ListarLineaDeVentas();
        foreach (LineaDeVentaDTO ldv in listaLDV)
        {
            if (ldv.IdVenta == venta1.IdVenta)
            {
                await _lineadeventaServicio.EliminarLineaDeVenta(ldv.IdLineaDeVenta);
            }
        }

        var response = await _ventaServicio.EliminarVenta(venta1.IdVenta);
        if (response != null)
        {
            _navManager.NavigateTo("/"); 
        }
        else
        {
            Snackbar.Add("Error al eliminar", Severity.Error);
        }

        
    }


    private async void Autorizar()
    {
        if (medioDePago == "Con Tarjeta")
        {
            var token = await SolicitarTokenPago();

            if (!string.IsNullOrEmpty(token))
            {
                var pagoExitoso = await ConfirmarPago(token);

                if (pagoExitoso)
                {
                    Snackbar.Add("Pago autorizado correctamente", Severity.Success);
                    // Aquí puedes realizar cualquier acción adicional después de que el pago se haya autorizado
                }
                else
                {
                    Snackbar.Add("Error al confirmar el pago", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Error al solicitar el token de pago", Severity.Error);
            }
        }
    }
 

    public async Task<string> SolicitarTokenPago()
    {
        // Crear la solicitud con los datos necesarios
        var request = new TokenRequest
            {
                card_number = creditCard,
                card_expiration_month = expiration.Substring(0, 2),
                card_expiration_year = expiration.Substring(3),
                security_code = cvv,
                card_holder_name = nombreTitular,
                card_holder_identification = new CardHolderIdentification
                {
                    type = "dni",
                    number = dniTitular
                }
            };

        // Convertir la solicitud a JSON
        var jsonRequest = JsonSerializer.Serialize(request);

        // Configurar la solicitud HTTP
        var httpRequest = new HttpRequestMessage(HttpMethod.Post, "https://developers.decidir.com/api/v2/tokens");
        httpRequest.Content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

        // Agregar la clave API al encabezado
        httpRequest.Headers.Add("apikey", "b192e4cb99564b84bf5db5550112adea");

        // Enviar la solicitud HTTP
        var response = await _httpClient.SendAsync(httpRequest);

        // Verificar si la solicitud fue exitosa
        if (response.IsSuccessStatusCode)
        {
            // Leer y deserializar la respuesta JSON
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(jsonResponse);

            // Retornar el ID del token
            return tokenResponse.id;
        }
        else
        {
            // Manejar errores de solicitud
            Console.WriteLine($"Error en la solicitud: {response.StatusCode}");
            return null;
        }
    }


    private async Task<bool> ConfirmarPago(string token)
    {
        var apiKey = "566f2c897b5e4bfaa0ec2452f5d67f13"; // Clave API proporcionada por el proveedor

        string creditCardWithoutSpaces = creditCard.Replace(" ", "");
        string bin = creditCardWithoutSpaces.Substring(0, 6);

        var request = new PaymentRequest
            {
                SiteTransactionId = "IDNUESTRO", // Genera un ID de transacción único
                PaymentMethodId = 1,
                Token = token,
                Bin = bin,
                Amount = 1000,
                Currency = "ARS",
                Installments = 1,
                Description = "Pago de venta",
                PaymentType = "single",
                EstablishmentName = "La Tienda IS",
            };


        // Configura la solicitud HTTP
        var httpRequest = new HttpRequestMessage(HttpMethod.Post, "https://developers.decidir.com/api/v2/payments");
        httpRequest.Content = new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, "application/json");

        // Agrega la clave API al encabezado
        httpRequest.Headers.Add("apikey", apiKey);

        // Enviar la solicitud HTTP
        var response = await httpClient.SendAsync(httpRequest);

        if (response.IsSuccessStatusCode)
        {
            // Manejar la respuesta del pago
            return true;
        }
        else
        {
            // Manejar el error de confirmación de pago
            return false;
        }
    }



}
