@page "/realizarpago"


@using LaTiendaIS.Shared;
@using LaTiendaIS.Client.Service.Contrato;
@inject IArticuloServicio _articuloServicio

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<!--Pagar-->
@using LaTiendaIS.Shared;
@using LaTiendaIS.Client.Service.Contrato;
@inject IArticuloServicio _articuloServicio
@inject IVentaServicio _ventaServicio
@inject IClienteServicio _clienteServicio
@inject ILineaDeVentaServicio _lineadeventaServicio
@inject IServicioExternoServicio _servicioExterno
@inject ICondicionTServicio _condTributariaServicio


@using System.Net.Http.Json

@using MudBlazor
@using System.Text.Json;
@using System.Text;
@inject ISnackbar Snackbar
@inject NavigationManager _navManager


@inject HttpClient httpClient

<h2 style="margin-left: 20px; margin-top: 10px;">Realizar el pago</h2>
<div class="d-flex" style="max-width: 600px; margin: 20px ;">
    <MudSelect T="string" Label="Elegir medio de pago" AnchorOrigin="Origin.BottomCenter" @bind-Value="medioDePago">
        <MudSelectItem Value="@("")" />
        <MudSelectItem Value="@("Efectivo")" />
        <MudSelectItem Value="@("Con Tarjeta")" />
    </MudSelect>
</div>

<div class="d-flex flex-column" style="max-width: 600px; margin: 20px;" @key="medioDePago">
    @if (string.IsNullOrWhiteSpace(medioDePago))
    {
        <p>Por favor, selecciona un medio de pago.</p>
    }
    else if (medioDePago == "Efectivo")
    {
        <div>
            <p>Total a pagar: @totalAPagar.ToString("0.00")</p>
            <br />
            <p>Monto Recibido: <input type="number" @bind="montoRecibido" /></p>
            <br />
            <p>
                @if (montoRecibido >= totalAPagar)
                {
                    Vuelto = calcularVuelto();
                
                }
                else
                {
                    Vuelto = "Cantidad insuficiente";
                }
                Vuelto: @Vuelto
            </p>
        </div>
        <div>
            @if (totalAPagar >= 10000)
            {
                <MudGrid Class="justify-space-between" Style="max-width: 300px;">
                    <MudItem xs="12">
                        <MudTextField Label="Nombre del Titular" @bind-Value="nombreTitular" Variant="@Variant.Text" MaxLength="40" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Mask="@(new PatternMask("00000000"))" Label="DNI" @bind-Value="dniTitular" Variant="@Variant.Text" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="CUIT" @bind-Value="cuitPrefix" Variant="@Variant.Text" />
                        <span>-@dniTitular-</span>
                        <MudTextField Label="Último dígito" @bind-Value="cuitLastDigit" Variant="@Variant.Text" />
                    </MudItem>
                    <MudItem xs="12">
                        <!-- Autocompletar o seleccionar la Condición Tributaria -->
                        <MudAutocomplete T="string" Label="Seleccione Condicion Tributaria" @bind-Value="condTributaria" SearchFunc="@Search1" />
                    </MudItem>
                    <MudItem xs="12">
                        Nombre del Titular: <b>@nombreTitular</b><br />
                        DNI: <b>@dniTitular</b><br />
                        CUIT: <b>@cuitPrefix-@dniTitular-@cuitLastDigit</b><br />
                        Condicion Tributaria: <b>@condTributaria</b><br />
                    </MudItem>
                </MudGrid>

            }
        </div>
        <div class="d-flex" style="max-width: 300px; margin: 20px;">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancelar">Cancelar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => PagarConEfectivo()" style="margin-left: 30px;">Pagar</MudButton>
        </div>
    }
    else if (medioDePago == "Con Tarjeta")
    {
        <div>
                    <MudGrid Class="justify-space-between" Style="max-width: 300px;">
                        <MudItem xs="12">
                    <MudTextField Label="Nombre del Titular" @bind-Value="nombreTitular" Variant="@Variant.Text" MaxLength="40" />
                        </MudItem>
                        <MudItem xs="6">
                    <MudTextField Mask="@(new PatternMask("00000000"))" Label="DNI" @bind-Value="dniTitular" Variant="@Variant.Text" />
                        </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="CUIT" @bind-Value="cuitPrefix" Variant="@Variant.Text" />
                        <span>-@dniTitular-</span>
                        <MudTextField Label="Último dígito" @bind-Value="cuitLastDigit" Variant="@Variant.Text" />
                    </MudItem>
                        <MudItem xs="12">
                            <MudTextField Mask="@(new PatternMask("0000 0000 0000 0000"))" Label="Numero de Tarjeta"
                                          @bind-Value="creditCard" Variant="@Variant.Text" Clearable />
                         </MudItem>
                         <MudItem xs="4">
                             <MudTextField Mask="@(new DateMask("MM/YY", 'Y', 'M'))" Label="Vencimiento"
                                           @bind-Value="expiration" Variant="@Variant.Text" />
                         </MudItem>
                        <MudItem xs="4" />
                        <MudItem xs="4">
                             <MudTextField Mask="@(new PatternMask("000"))" Label="CVV"
                                @bind-Value="cvv" Variant="@Variant.Text" />
                        </MudItem>
                 <MudItem xs="12">
                     <!-- Autocompletar o seleccionar la Condición Tributaria -->
                     <MudAutocomplete T="string" Label="Seleccione Condicion Tributaria" @bind-Value="condTributaria" SearchFunc="@Search1" />
                 </MudItem>
                 

                         <MudItem xs="12">
                            Nombre del Titular: <b>@nombreTitular</b><br />
                            DNI: <b>@dniTitular</b><br />
                            CUIT: <b>@cuitPrefix-@dniTitular-@cuitLastDigit</b><br />
                            Numero de Tarjeta: <b>@creditCard</b><br />
                            Fecha de Venc: <b>@expiration</b><br />
                            CVV: <b>@cvv</b>
                            Condicion Tributaria: <b>@condTributaria</b><br />
                        </MudItem>
                    </MudGrid>

        </div>
        <div class="d-flex" style="max-width: 300px; margin: 20px;">
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancelar">Cancelar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => Autorizar()" style=" margin-left: 30px;">Autorizar Pago</MudButton>
        </div>       
    }
</div>



@code {
    //Tarjeta
    private string nombreTitular;
    private string dniTitular;
    private string creditCard;
    private string expiration;
    private string cvv;


    string cuitPrefix = "23"; // Valor inicial de los dos primeros dígitos del CUIT
    string cuitLastDigit = "9"; // Valor inicial del último dígito del CUIT

    //Medios de Pago
    private string medioDePago = "";
    private decimal totalAPagar; // Cargado en OnInitializedAsync
    private decimal montoRecibido;

    private string condTributaria;
    private string[] states =
    {"Responsable Inscripto","Monotributo","Exento","No Responsable","Consumidor Final" };

    int condT = 0;

    private string Vuelto;

    public Venta venta1;

    private readonly HttpClient _httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _ventaServicio.ObtenerUltimaVenta();
            if (response != null)
            {
                venta1 = response;
                totalAPagar = venta1.Total;
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add("Ultima venta no cargada", Severity.Error);
        }

    }

    private string calcularVuelto()
    {
        return (montoRecibido - totalAPagar).ToString("0.00");
    }

    private async void Cancelar()
    {
        var listaLDV = await _lineadeventaServicio.ListarLineaDeVentas();
        foreach (LineaDeVenta ldv in listaLDV)
        {
            if (ldv.IdVenta == venta1.IdVenta)
            {
                await _lineadeventaServicio.EliminarLineaDeVenta(ldv.IdLineaDeVenta);
            }
        }

        var response = await _ventaServicio.EliminarVenta(venta1.IdVenta);
        if (response != null)
        {
            _navManager.NavigateTo("/"); 
        }
        else
        {
            Snackbar.Add("Error al eliminar", Severity.Error);
        }
    }

    private async void Autorizar()
    {
        try
        {

            var token = await _servicioExterno.ObtenerToken();

            if (!string.IsNullOrEmpty(token))
            {
                var pagoExitoso = await _servicioExterno.ConfirmarPago(token);

                if (pagoExitoso)
                {

                    var condTributariaDB = await _condTributariaServicio.ObtenerCondicionTributaria(condTributaria);

                    //pido datos del cliente y realizo factura dependiendo de condicion tributaria
                    Cliente cliente = new Cliente();
                    cliente.IdCondicionTributaria = condTributariaDB.IdCondicionTributaria;
                    cliente.Nombre = nombreTitular;
                    cliente.CUIT = cuitPrefix + "-" + dniTitular + "-" + cuitLastDigit;



                    //servicio cliente -> agregar cliente
                    var response = _clienteServicio.AgregarCliente(cliente);

                    if (response != null)
                    {
                        Snackbar.Add("Pago autorizado correctamente", Severity.Success);
                        _navManager.NavigateTo("/comprobante");
                    }
                    else
                    {
                        Snackbar.Add("Datos de Cliente incorrectos", Severity.Error);
                    }
                    // Aquí puedes realizar cualquier acción adicional después de que el pago se haya autorizado
                }
                else
                {
                    Snackbar.Add("Error al confirmar el pago", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Error al solicitar el token de pago", Severity.Error);
            }
        }catch(Exception ex)
        {
            Snackbar.Add("Error al solicitar el token de pago", Severity.Error);
        }

        

    }

    private async void PagarConEfectivo()
    {

        if (Vuelto != "Cantidad insuficiente")
        {
            if (totalAPagar>10000)
            {
                //pido datos del cliente y realizo factura dependiendo de condicion tributaria
                Cliente cliente = new Cliente();
                cliente.Nombre = nombreTitular;
                cliente.CUIT = cuitPrefix + "-" + dniTitular + "-" + cuitLastDigit;
                CondicionTributaria cond = new CondicionTributaria();
                cond.Descripcion = condTributaria;
                cliente.CondicionTributaria = cond;


                var response = _clienteServicio.AgregarCliente(cliente);

                if (response != null)
                {
                    _navManager.NavigateTo("/comprobante");
                    Snackbar.Add("Pagó", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Datos de Cliente incorrectos", Severity.Error);
                }

            }
            else
            {
                Snackbar.Add("Cliente debe pagar mas de 10000 para recibir factura nominal", Severity.Warning);
                _navManager.NavigateTo("/comprobante");
            }
        }
        else
        {
            Snackbar.Add("Monto recibido insufiente", Severity.Error);
        }

    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


}
