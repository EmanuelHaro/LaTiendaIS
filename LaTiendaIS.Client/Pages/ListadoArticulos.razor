@page "/listadoArticulos"


@using LaTiendaIS.Shared;
@using LaTiendaIS.Client.Service.Contrato
@inject IArticuloServicio _articuloServicio
@inject IVentaServicio _ventaServicio
@inject IStockServicio _stockServicio
@inject ILineaDeVentaServicio _lineadeventaServicio

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations


@using System.Net.Http.Json

@using MudBlazor
@inject ISnackbar Snackbar
@inject NavigationManager _navManager


@inject HttpClient httpClient


<div class="container justify-content-center">
    <div class="row align-items-start">
        <div class="col-md-6">
            @* Buscar artículo *@
            <div class="d-flex" style=" margin-bottom: 20px;">
                <MudTextField @bind-Value="codigoTienda" Variant="Variant.Text" Label="Ingresar Codigo"></MudTextField>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ObtenerStock(codigoTienda)">Buscar</MudButton>
            </div>
            <div class="d-flex" style="margin-bottom: 20px;">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AgregarArticulo(codigoTienda)">Agregar</MudButton>
            </div>
        </div>
        <div class="col-md-6">
            @* Ingreso de talle *@
            <div class="d-flex" style="margin-bottom: 20px;">
                <MudSelect T="string" Label="Talles" @bind-Value="talleElegido" AnchorOrigin="Origin.BottomCenter" OnValueChanged="HandleTalleChanged">
                    @foreach (var talleUnico in ListaStock.Select(art => art.Talle.DescripcionTalle).Distinct())
                    {
                        <MudSelectItem Value="@(talleUnico)" />
                    }
                </MudSelect>
            </div>
            @* Ingreso de color *@
            <div class="d-flex" style="margin-bottom: 20px;">
                <MudSelect T="string" Label="Color" @bind-Value="colorElegido" AnchorOrigin="Origin.BottomCenter" TextChanged="ObtenerCantidad">
                    @foreach (var color in ListaStock.Where(art => art.Talle.DescripcionTalle == talleElegido).Select(art => art.Color.DescripcionColor).Distinct())
                    {
                        <MudSelectItem Value="@(color)" />
                    }
                </MudSelect>
            </div>
            @* Ingreso de cantidad *@
            <div class="d-flex" style="margin-bottom: 20px;">
                <MudNumericField @bind-Value="cantidadElegida" Label="Cantidad" Variant="Variant.Text" Min="0" Max="cantidadMaxima" />
            </div>
        </div>
    </div>
</div>

@* <div class="d-flex" style="max-width: 600px; margin: 20px ;">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AgregarArticulo(codigoTienda)">Agregar</MudButton>
</div> *@

<MudTable Items="@stockTabla" Dense="@dense" Hover="@hover" ReadOnly="false" CanCancelEdit="@canCancelEdit" Filter="new Func<Stock,bool>(FilterFunc)"
@bind-SelectedItem="selectedItem1" SortLabel="Ordenar por" EditTrigger="TableEditTrigger.EditButton">
    <ToolBarContent>
        <MudText Typo="Typo.h4">Listado de Articulos</MudText>
        <MudSpacer />
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width:20px;" />
        <col style="width:20px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Stock, object>(x=>x.Articulo.IdCodigo)">Codigo</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.Articulo.Descripcion)">Descripcion</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.Articulo.PrecioDeVenta)">Precio De Venta</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.Articulo.Marca.DescripcionMarca)">Marca</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Stock, object>(x=>x.Articulo.Categoria.DescripcionCategoria)">Categoria</MudTableSortLabel></MudTh>
        <MudTh>Talle</MudTh>
        <MudTh>Color</MudTh>
        <MudTh>Cantidad</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="IdCodigo">@context.Articulo.CodigoTienda</MudTd>
    <MudTd DataLabel="Descripcion">@context.Articulo.Descripcion</MudTd>
    <MudTd DataLabel="PrecioVenta">@context.Articulo.PrecioDeVenta.ToString("0.00")</MudTd>
    <MudTd DataLabel="Marca">@context.Articulo.Marca.DescripcionMarca</MudTd>
    <MudTd DataLabel="Categoria">@context.Articulo.Categoria.DescripcionCategoria</MudTd>
    <MudTd>@context.Talle?.DescripcionTalle</MudTd> 
    <MudTd>@context.Color?.DescripcionColor </MudTd>
        <MudTd>@context.Cantidad </MudTd>
    <MudTd>
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="() => EliminarArticulo(context.IdStock)" />
    </MudTd>
    </RowTemplate>
</MudTable>

<div class="d-flex" style="max-width: 200px; margin: 20px; margin-left: 80%">
    <MudTextField @bind-Value="venta1.Total" Label="Total" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" ReadOnly="true" Style="width: 100%" Step="0.01" Format="N2" />
</div>

<div class="container d-flex justify-content-between">
    <div class="d-flex" style="max-width: 300px; margin: 20px;">
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => CancelarVenta()">Cancelar</MudButton>
    </div>
    <div class="d-flex" style="max-width: 300px; margin: 20px;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Pagar">Ir a Pagar</MudButton>
    </div>
</div>


@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private int codigoTienda = 1000;
    private double? Total = 0;
    private string talleElegido = "";
    private string colorElegido = "";
    private int cantidadElegida = 0;
    private int cantidadMaxima = 0;
    private int cantidadtabla = 0;

    private Stock selectedItem1 = null;
    private List<Articulo> listaArticulos = new List<Articulo>();
    private List<Stock> ListaStock = new List<Stock>(); // se carga cuando presionamos el boton Buscar
    private List<Stock> stockTabla = new List<Stock>();
    public Venta venta1;


    protected override async Task OnInitializedAsync()
    {
        venta1 = new Venta();
        venta1.FechaVenta = DateTime.Now;
        var response = await _ventaServicio.AgregarVenta(venta1);
        if(response!=null)
        {
            var lista = await _ventaServicio.ListarVentas();
            venta1 = lista.LastOrDefault();
        }

    }

    private void HandleTalleChanged(string nuevoTalle)
    {
        // Este método se ejecutará cuando cambie el valor del primer MudSelect
        // Puedes poner lógica adicional aquí si es necesario
        talleElegido = nuevoTalle;

    }

    private void HandleColorChanged(string nuevoColor)
    {
        colorElegido = nuevoColor;
        ObtenerCantidad(); // Call ObtenerCantidad after updating colorElegido
    }

    private bool FilterFunc(Stock art)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (art.Articulo.Descripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (art.Articulo.IdCodigo.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void AgregarArticulo(int idArticulo)
    {
        if (idArticulo != 0 && cantidadElegida != 0)
        {

            try
            {
                var articulo = await _articuloServicio.ObtenerArticulo(idArticulo);

                // if (!stockTabla.Any(stock => stock.IdArticulo == articulo.IdCodigo && stock.Talle.DescripcionTalle == talleElegido && stock.Color.DescripcionColor == colorElegido))
                // {

                var stockDelProductoSeleccionado = await _stockServicio.ObtenerStockPorArticulo(idArticulo, talleElegido, colorElegido);

                int cant = await _stockServicio.ObtenerCantidad(idArticulo, talleElegido, colorElegido);

                if (cant >= cantidadElegida)
                {
                    stockDelProductoSeleccionado.Cantidad = cantidadElegida;
                    var result = _stockServicio.ModificarCantidadStock(codigoTienda, talleElegido, colorElegido, stockDelProductoSeleccionado);


                    if (result != null)
                    {
                        LineaDeVenta lineaDeVenta = new LineaDeVenta();
                        lineaDeVenta.IdArticulo = articulo.IdCodigo;
                        lineaDeVenta.Cantidad = cantidadElegida;
                        lineaDeVenta.IdVenta = venta1.IdVenta;
                        var response = await _lineadeventaServicio.AgregarLineaDeVenta(lineaDeVenta);

                        if (response != null)
                        {
                            // listaArticulos.Add(articulo);
                            //listaArticulosModel.Add(articuloStockViewModel);
                            listaArticulos.Add(articulo);
                            venta1.Total += (decimal)(articulo.PrecioDeVenta * cantidadElegida);
                            Snackbar.Add("Articulo agregado", Severity.Success);

                            stockTabla.Add(stockDelProductoSeleccionado);

                            talleElegido = "";
                            colorElegido = "";
                            cantidadElegida = 0;
                            cantidadMaxima = 0;



                            StateHasChanged();
                        }
                        else
                        {
                            Snackbar.Add("No se pudo agregar el articulo a la linea de venta", Severity.Error);
                        }
                    }
                }
                else
                {
                    Snackbar.Add("Cantidad de producto solicitada mayor a existente!", Severity.Error);
                }

                // }
                // else
                // {
                //     Snackbar.Add("Articulo ya esta agregado", Severity.Warning);
                // }
            }

            catch (Exception ex)
            {
                Snackbar.Add("No se pudo agregar el articulo", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Codigo Invalido/Cantidad elegida = 0 ", Severity.Warning);
        }
    }

    private async void ObtenerStock(int codigoTienda)
    {
        if (codigoTienda != 0)
        {
            try
            {
                var stockdb = await _stockServicio.ObtenerListaDeTalleYColorDelStock(codigoTienda);
                foreach (var stock1 in stockdb)
                {
                    ListaStock.Add(stock1);
                }
                StateHasChanged();
                Snackbar.Add("Codigo Valido", Severity.Success);


            }
            catch (Exception ex)
            {
                Snackbar.Add("Codigo Invalido", Severity.Warning);
            }

        }
        else
        {
            Snackbar.Add("Codigo Invalido", Severity.Warning);
        }
    }

    private async void EliminarArticulo(int idStock)
    {
        try
        {
            var dbStock = await _stockServicio.ObtenerStockPorId(idStock);

            LineaDeVenta ultimaLDV = await _lineadeventaServicio.ObtenerUltimaLineaDeVenta();
            var response = await _lineadeventaServicio.EliminarLineaDeVenta(ultimaLDV.IdLineaDeVenta);

            if (response != null)
            {

                Stock stock1 = new Stock();
                stock1.Cantidad = dbStock.Cantidad;

                var stockSeleccionado = stockTabla.Find(s => s.IdArticulo == dbStock.IdArticulo);
                dbStock.Cantidad = stockSeleccionado.Cantidad;
                var result = _stockServicio.AgregarCantidadStock(dbStock.Articulo.CodigoTienda, dbStock.Talle.DescripcionTalle, dbStock.Color.DescripcionColor, dbStock);
                if (result != null)
                {
                    stockTabla.Remove(stockSeleccionado);
                    listaArticulos.Remove(dbStock.Articulo);
                    venta1.Total -= (decimal)dbStock.Articulo.PrecioDeVenta * dbStock.Cantidad;
                    Snackbar.Add("Línea de venta eliminada", Severity.Success);
                    Snackbar.Add("Stock modificado", Severity.Success);
                    StateHasChanged();
                }
            }
            else
            {
                Snackbar.Add("Línea de venta no eliminada", Severity.Error);
            }


            StateHasChanged();
            Snackbar.Add("Artículo eliminado", Severity.Warning);
        }
        catch(Exception ex)
        {
            Snackbar.Add("Error", Severity.Error);
        }
    }

    private async void ObtenerCantidad()
    {
        if (talleElegido != "" && colorElegido != "")
        {
            try
            {
                var result = await _stockServicio.ObtenerCantidad(codigoTienda, talleElegido, colorElegido);
                if (result != null)
                {
                    cantidadMaxima = result;
                    StateHasChanged();
                }
            }
            catch(Exception ex)
            {
                Snackbar.Add("Cantidad no encontrada", Severity.Error);
            }

        }
        
    }

    private async void Pagar()
    {

        if(venta1.Total!=0)
        {
            var response = await _ventaServicio.ModificarVenta(venta1.IdVenta, venta1);
            _navManager.NavigateTo("/realizarpago");
            Snackbar.Add("Pagó", Severity.Success);
        }

        else
        {
            Snackbar.Add("Agregue productos a la venta", Severity.Error);
        }
    }

    private async void CancelarVenta()
    {
        
        var response = await _ventaServicio.EliminarVenta(venta1.IdVenta);
        if (response != null)
        {
            listaArticulos.Clear();
            Total = 0;
            _navManager.NavigateTo("/");
        }
    }

    private void IrAPagina()
    {
        _navManager.NavigateTo("/realizarpago");
    }

}
